// @ts-nocheck

import { InContextSdkMethod } from '@graphql-mesh/types';
import { MeshContext } from '@graphql-mesh/runtime';

export namespace CzidgqlTypes {
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Represents non-fractional signed whole numeric values. Since the value may
   * exceed the size of a 32-bit integer, it's encoded as a string.
   */
  BigInt: { input: any; output: any; }
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: { input: any; output: any; }
};

export type AlignmentConfig = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  indexDirSuffix?: Maybe<Scalars['String']['output']>;
  lineageVersion: Scalars['String']['output'];
  lineageVersionOld?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  s3Accession2taxidPath?: Maybe<Scalars['String']['output']>;
  s3DeuterostomeDbPath?: Maybe<Scalars['String']['output']>;
  s3LineagePath?: Maybe<Scalars['String']['output']>;
  s3NrDbPath?: Maybe<Scalars['String']['output']>;
  s3NrLocDbPath?: Maybe<Scalars['String']['output']>;
  s3NtDbPath?: Maybe<Scalars['String']['output']>;
  s3NtInfoDbPath?: Maybe<Scalars['String']['output']>;
  s3NtLocDbPath?: Maybe<Scalars['String']['output']>;
  s3TaxonBlacklistPath?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type Annotation = {
  name: Scalars['String']['input'];
};

export type AppConfig = {
  key: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

/** Autogenerated return type of CreateUser. */
export type CreateUserPayload = {
  archetypes?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  institution?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['Int']['output']>;
  segments?: Maybe<Scalars['String']['output']>;
  sendActivation?: Maybe<Scalars['Boolean']['output']>;
};

export type DbSample = {
  alignmentConfigName?: Maybe<Scalars['String']['output']>;
  basespaceAccessToken?: Maybe<Scalars['String']['output']>;
  clientUpdatedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  dagVars?: Maybe<Scalars['String']['output']>;
  doNotProcess: Scalars['Boolean']['output'];
  hostGenomeId?: Maybe<Scalars['Int']['output']>;
  hostGenomeName?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  initialWorkflow: Scalars['String']['output'];
  inputFiles: Array<InputFile>;
  maxInputFragments?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pipelineBranch?: Maybe<Scalars['String']['output']>;
  pipelineCommit?: Maybe<Scalars['String']['output']>;
  pipelineExecutionStrategy?: Maybe<Scalars['String']['output']>;
  privateUntil?: Maybe<Scalars['ISO8601DateTime']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  s3Bowtie2IndexPath?: Maybe<Scalars['String']['output']>;
  s3PreloadResultPath?: Maybe<Scalars['String']['output']>;
  s3StarIndexPath?: Maybe<Scalars['String']['output']>;
  sampleNotes?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  subsample?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  uploadError?: Maybe<Scalars['String']['output']>;
  uploadedFromBasespace: Scalars['Int']['output'];
  useTaxonWhitelist: Scalars['Boolean']['output'];
  userId: Scalars['Int']['output'];
  webCommit?: Maybe<Scalars['String']['output']>;
};

export type DerivedSampleOutput = {
  hostGenomeName: Scalars['String']['output'];
  pipelineRun?: Maybe<PipelineRun>;
  projectName: Scalars['String']['output'];
  summaryStats?: Maybe<SampleSummaryStats>;
};

export type HostGenome = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  defaultBackgroundId?: Maybe<Scalars['Int']['output']>;
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  s3Bowtie2IndexPath: Scalars['String']['output'];
  s3Minimap2IndexPath?: Maybe<Scalars['String']['output']>;
  s3StarIndexPath: Scalars['String']['output'];
  samplesCount: Scalars['Int']['output'];
  skipDeuteroFilter: Scalars['Int']['output'];
  taxaCategory: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user?: Maybe<User>;
  userId?: Maybe<Scalars['Int']['output']>;
};

export type InputFile = {
  createdAt: Scalars['ISO8601DateTime']['output'];
  id: Scalars['Int']['output'];
  name?: Maybe<Scalars['String']['output']>;
  parts?: Maybe<Scalars['String']['output']>;
  presignedUrl?: Maybe<Scalars['String']['output']>;
  sampleId: Scalars['Int']['output'];
  source?: Maybe<Scalars['String']['output']>;
  sourceType?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  uploadClient?: Maybe<Scalars['String']['output']>;
};

export type MngsRunInfo = {
  createdAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  finalized?: Maybe<Scalars['Int']['output']>;
  reportReady?: Maybe<Scalars['Boolean']['output']>;
  resultStatusDescription?: Maybe<Scalars['String']['output']>;
  totalRuntime?: Maybe<Scalars['Int']['output']>;
  withAssembly?: Maybe<Scalars['Int']['output']>;
};

export type Mutation = {
  createUser: CreateUserPayload;
};


export type MutationcreateUserArgs = {
  archetypes?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  institution?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['Int']['input']>;
  segments?: InputMaybe<Scalars['String']['input']>;
  sendActivation?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Pathogen = {
  category?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  taxId?: Maybe<Scalars['Int']['output']>;
};

export type PathogenList = {
  citations?: Maybe<Array<Scalars['String']['output']>>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  id?: Maybe<Scalars['ID']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pathogens?: Maybe<Array<Pathogen>>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  version?: Maybe<Scalars['String']['output']>;
};

export type PipelineRun = {
  adjustedRemainingReads?: Maybe<Scalars['Int']['output']>;
  alertSent: Scalars['Boolean']['output'];
  alignmentConfig?: Maybe<AlignmentConfig>;
  alignmentConfigId?: Maybe<Scalars['Int']['output']>;
  alignmentConfigName?: Maybe<Scalars['String']['output']>;
  assembled?: Maybe<Scalars['Int']['output']>;
  compressionRatio?: Maybe<Scalars['Float']['output']>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  dagVars?: Maybe<Scalars['String']['output']>;
  deprecated?: Maybe<Scalars['Boolean']['output']>;
  errorMessage?: Maybe<Scalars['String']['output']>;
  executedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  finalized?: Maybe<Scalars['Int']['output']>;
  fractionSubsampled?: Maybe<Scalars['Float']['output']>;
  id: Scalars['Int']['output'];
  jobStatus?: Maybe<Scalars['String']['output']>;
  knownUserError?: Maybe<Scalars['String']['output']>;
  maxInputFragments?: Maybe<Scalars['Int']['output']>;
  pipelineBranch?: Maybe<Scalars['String']['output']>;
  pipelineCommit?: Maybe<Scalars['String']['output']>;
  pipelineExecutionStrategy?: Maybe<Scalars['String']['output']>;
  pipelineVersion?: Maybe<Scalars['String']['output']>;
  qcPercent?: Maybe<Scalars['Float']['output']>;
  resultsFinalized?: Maybe<Scalars['Int']['output']>;
  s3OutputPrefix?: Maybe<Scalars['String']['output']>;
  sampleId?: Maybe<Scalars['Int']['output']>;
  sfnExecutionArn?: Maybe<Scalars['String']['output']>;
  subsample?: Maybe<Scalars['Int']['output']>;
  timeToFinalized?: Maybe<Scalars['Int']['output']>;
  timeToResultsFinalized?: Maybe<Scalars['Int']['output']>;
  totalErccReads?: Maybe<Scalars['Int']['output']>;
  totalReads?: Maybe<Scalars['Int']['output']>;
  truncated?: Maybe<Scalars['Int']['output']>;
  unmappedReads?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  useTaxonWhitelist: Scalars['Boolean']['output'];
  wdlVersion?: Maybe<Scalars['String']['output']>;
};

export type Project = {
  backgroundFlag?: Maybe<Scalars['Int']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  creator?: Maybe<User>;
  daysToKeepSamplePrivate: Scalars['Int']['output'];
  description?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  maxInputFragmentsDefault?: Maybe<Scalars['Int']['output']>;
  name: Scalars['String']['output'];
  publicAccess: Scalars['Int']['output'];
  samples?: Maybe<Array<Sample>>;
  subsampleDefault?: Maybe<Scalars['Int']['output']>;
  totalSampleCount: Scalars['Int']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
};

export type Query = {
  appConfig?: Maybe<AppConfig>;
  pathogenList: PathogenList;
  project: Project;
  sample: Sample;
  sampleReadsStats: SampleReadsStatsList;
  samplesList: SampleList;
  user: User;
};


export type QueryappConfigArgs = {
  id: Scalars['ID']['input'];
};


export type QuerypathogenListArgs = {
  version?: InputMaybe<Scalars['String']['input']>;
};


export type QueryprojectArgs = {
  id: Scalars['Int']['input'];
};


export type QuerysampleArgs = {
  sampleId: Scalars['Int']['input'];
};


export type QuerysampleReadsStatsArgs = {
  sampleIds: Array<Scalars['Int']['input']>;
};


export type QuerysamplesListArgs = {
  annotations?: InputMaybe<Array<Annotation>>;
  basic?: InputMaybe<Scalars['Boolean']['input']>;
  domain?: InputMaybe<Scalars['String']['input']>;
  hostIds?: InputMaybe<Array<Scalars['Int']['input']>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  listAllIds?: InputMaybe<Scalars['Boolean']['input']>;
  location?: InputMaybe<Scalars['String']['input']>;
  locationV2?: InputMaybe<Array<Scalars['String']['input']>>;
  offset?: InputMaybe<Scalars['Int']['input']>;
  orderBy?: InputMaybe<Scalars['String']['input']>;
  orderDir?: InputMaybe<Scalars['String']['input']>;
  projectId?: InputMaybe<Scalars['Int']['input']>;
  requestedSampleIds?: InputMaybe<Array<Scalars['Int']['input']>>;
  sampleIds?: InputMaybe<Array<Scalars['Int']['input']>>;
  searchString?: InputMaybe<Scalars['String']['input']>;
  taxIds?: InputMaybe<Array<Scalars['Int']['input']>>;
  taxLevels?: InputMaybe<Array<Scalars['String']['input']>>;
  thresholdFilterInfo?: InputMaybe<Scalars['String']['input']>;
  time?: InputMaybe<Array<Scalars['String']['input']>>;
  tissue?: InputMaybe<Array<Scalars['String']['input']>>;
  visibility?: InputMaybe<Array<Scalars['String']['input']>>;
  workflow?: InputMaybe<Scalars['String']['input']>;
};


export type QueryuserArgs = {
  archetypes: Scalars['String']['input'];
  email: Scalars['String']['input'];
  institution: Scalars['String']['input'];
  name: Scalars['String']['input'];
  role: Scalars['Int']['input'];
  segments: Scalars['String']['input'];
};

export type Sample = {
  alignmentConfigName?: Maybe<Scalars['String']['output']>;
  basespaceAccessToken?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  dagVars?: Maybe<Scalars['String']['output']>;
  defaultBackgroundId?: Maybe<Scalars['Int']['output']>;
  defaultPipelineRunId?: Maybe<Scalars['Int']['output']>;
  details: SampleDetails;
  doNotProcess: Scalars['Boolean']['output'];
  editable?: Maybe<Scalars['Boolean']['output']>;
  hostGenome?: Maybe<HostGenome>;
  hostGenomeId?: Maybe<Scalars['Int']['output']>;
  id: Scalars['Int']['output'];
  initialWorkflow: Scalars['String']['output'];
  maxInputFragments?: Maybe<Scalars['Int']['output']>;
  name: Scalars['String']['output'];
  pipelineBranch?: Maybe<Scalars['String']['output']>;
  pipelineCommit?: Maybe<Scalars['String']['output']>;
  pipelineExecutionStrategy?: Maybe<Scalars['String']['output']>;
  pipelineRuns?: Maybe<Array<PipelineRun>>;
  privateUntil?: Maybe<Scalars['ISO8601DateTime']['output']>;
  project?: Maybe<Project>;
  projectId?: Maybe<Scalars['Int']['output']>;
  public: Scalars['Int']['output'];
  s3Bowtie2IndexPath?: Maybe<Scalars['String']['output']>;
  s3PreloadResultPath?: Maybe<Scalars['String']['output']>;
  s3StarIndexPath?: Maybe<Scalars['String']['output']>;
  sampleDeletable?: Maybe<Scalars['Boolean']['output']>;
  sampleNotes?: Maybe<Scalars['String']['output']>;
  status?: Maybe<Scalars['String']['output']>;
  subsample?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  uploadError?: Maybe<Scalars['String']['output']>;
  uploadedFromBasespace?: Maybe<Scalars['Int']['output']>;
  useTaxonWhitelist: Scalars['Boolean']['output'];
  user?: Maybe<User>;
  userId?: Maybe<Scalars['Int']['output']>;
  webCommit?: Maybe<Scalars['String']['output']>;
  workflowRuns?: Maybe<Array<WorkflowRun>>;
};

export type SampleDetails = {
  dbSample?: Maybe<DbSample>;
  derivedSampleOutput?: Maybe<DerivedSampleOutput>;
  metadata?: Maybe<SampleMetadata>;
  mngsRunInfo?: Maybe<MngsRunInfo>;
  uploader: SampleUploader;
  workflowRunsCountByWorkflow?: Maybe<Scalars['String']['output']>;
};

export type SampleList = {
  sampleIds?: Maybe<Array<Scalars['Int']['output']>>;
  samples: Array<Sample>;
};

export type SampleMetadata = {
  collectionDate?: Maybe<Scalars['String']['output']>;
  collectionLocationV2?: Maybe<Scalars['String']['output']>;
  nucleotideType?: Maybe<Scalars['String']['output']>;
  sampleType?: Maybe<Scalars['String']['output']>;
  waterControl?: Maybe<Scalars['String']['output']>;
};

export type SampleReadsStats = {
  initialReads?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pipelineVersion?: Maybe<Scalars['String']['output']>;
  sampleId: Scalars['Int']['output'];
  steps?: Maybe<Array<SampleSteps>>;
  wdlVersion?: Maybe<Scalars['String']['output']>;
};

export type SampleReadsStatsList = {
  sampleReadsStats: Array<SampleReadsStats>;
};

export type SampleSteps = {
  name?: Maybe<Scalars['String']['output']>;
  readsAfter?: Maybe<Scalars['Int']['output']>;
};

export type SampleSummaryStats = {
  adjustedRemainingReads?: Maybe<Scalars['Int']['output']>;
  compressionRatio?: Maybe<Scalars['Float']['output']>;
  insertSizeMean?: Maybe<Scalars['Float']['output']>;
  insertSizeStandardDeviation?: Maybe<Scalars['Float']['output']>;
  lastProcessedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  percentRemaining?: Maybe<Scalars['Float']['output']>;
  qcPercent?: Maybe<Scalars['Float']['output']>;
  readsAfterCzidDedup?: Maybe<Scalars['Int']['output']>;
  readsAfterPriceseq?: Maybe<Scalars['Int']['output']>;
  readsAfterStar?: Maybe<Scalars['Int']['output']>;
  readsAfterTrimmomatic?: Maybe<Scalars['Int']['output']>;
  unmappedReads?: Maybe<Scalars['Int']['output']>;
};

export type SampleUploader = {
  id: Scalars['Int']['output'];
  name?: Maybe<Scalars['String']['output']>;
};

export type User = {
  archetypes: Scalars['String']['output'];
  createdByUserId: Scalars['BigInt']['output'];
  email: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  institution: Scalars['String']['output'];
  name: Scalars['String']['output'];
  role: Scalars['Int']['output'];
  segments: Scalars['String']['output'];
};

export type WorkflowRun = {
  cachedResults?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['ISO8601DateTime']['output'];
  deprecated: Scalars['Boolean']['output'];
  errorMessage?: Maybe<Scalars['String']['output']>;
  executedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  inputsJson?: Maybe<Scalars['String']['output']>;
  rerunFrom?: Maybe<Scalars['Int']['output']>;
  s3OutputPrefix?: Maybe<Scalars['String']['output']>;
  sample?: Maybe<Sample>;
  sampleId?: Maybe<Scalars['Int']['output']>;
  sfnExecutionArn?: Maybe<Scalars['String']['output']>;
  status: Scalars['String']['output'];
  timeToFinalized?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
  wdlVersion?: Maybe<Scalars['String']['output']>;
  workflow: Scalars['String']['output'];
};

  export type QuerySdk = {
      /** undefined **/
  appConfig: InContextSdkMethod<Query['appConfig'], QueryappConfigArgs, MeshContext>,
  /** undefined **/
  pathogenList: InContextSdkMethod<Query['pathogenList'], QuerypathogenListArgs, MeshContext>,
  /** undefined **/
  project: InContextSdkMethod<Query['project'], QueryprojectArgs, MeshContext>,
  /** undefined **/
  sample: InContextSdkMethod<Query['sample'], QuerysampleArgs, MeshContext>,
  /** undefined **/
  sampleReadsStats: InContextSdkMethod<Query['sampleReadsStats'], QuerysampleReadsStatsArgs, MeshContext>,
  /** undefined **/
  samplesList: InContextSdkMethod<Query['samplesList'], QuerysamplesListArgs, MeshContext>,
  /** undefined **/
  user: InContextSdkMethod<Query['user'], QueryuserArgs, MeshContext>
  };

  export type MutationSdk = {
      /** undefined **/
  createUser: InContextSdkMethod<Mutation['createUser'], MutationcreateUserArgs, MeshContext>
  };

  export type SubscriptionSdk = {
    
  };

  export type Context = {
      ["CZIDGQL"]: { Query: QuerySdk, Mutation: MutationSdk, Subscription: SubscriptionSdk },
      
    };
}
