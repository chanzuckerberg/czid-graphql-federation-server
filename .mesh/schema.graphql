schema {
  query: Query
  mutation: Mutation
}

directive @example(value: ObjMap) repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @globalOptions(sourceName: String, endpoint: String, operationHeaders: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @httpOperation(path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap) on FIELD_DEFINITION

type Query @globalOptions(sourceName: "CZIDREST", endpoint: "http://web:3000/") {
  appConfig(id: ID!): AppConfig
  pathogenList(version: String): PathogenList!
  project(id: Int!): Project!
  sample(sampleId: Int!): Sample!
  sampleReadsStats(sampleIds: [Int!]!): SampleReadsStatsList!
  samplesList(annotations: [Annotation!], basic: Boolean, domain: String, hostIds: [Int!], limit: Int, listAllIds: Boolean, location: String, locationV2: [String!], offset: Int, orderBy: String, orderDir: String, projectId: Int, requestedSampleIds: [Int!], sampleIds: [Int!], searchString: String, taxIds: [Int!], taxLevels: [String!], thresholdFilterInfo: String, time: [String!], tissue: [String!], visibility: [String!], workflow: String): SampleList!
  user(archetypes: String!, email: String!, institution: String!, name: String!, role: Int!, segments: String!): User!
  BulkDownload(bulkDownloadId: String): GeneratedMeshSchema @httpOperation(path: "/bulk_downloads/{args.bulkDownloadId}", operationSpecificHeaders: "{\"Cookie\":\"{context.headers['cookie']}\"}", httpMethod: GET)
  PipelineData(sampleId: String): PipelineData @httpOperation(path: "/samples/{args.sampleId}/pipeline_viz/7.0.json", operationSpecificHeaders: "{\"Cookie\":\"{context.headers['cookie']}\"}", httpMethod: GET)
  Samples(projectId: String): [query_Samples_items] @httpOperation(path: "/samples/index_v2.json?projectId={args.projectId}", operationSpecificHeaders: "{\"Cookie\":\"{context.headers['cookie']}\"}", httpMethod: GET)
  TaxonDist(backgroundId: String, taxonId: String): TaxonDist @httpOperation(path: "/backgrounds/{args.backgroundId}/show_taxon_dist.json?taxid={args.taxonId}", operationSpecificHeaders: "{\"Cookie\":\"{context.headers['cookie']}\"}", httpMethod: GET)
}

type Mutation {
  createUser(archetypes: String, email: String!, institution: String, name: String, role: Int, segments: String, sendActivation: Boolean): CreateUserPayload!
  UpdateSampleNotes(sampleId: String, input: mutationInput_UpdateSampleNotes_input_Input): JSON @httpOperation(path: "/samples/{args.sampleId}/save_metadata", operationSpecificHeaders: "{\"Cookie\":\"{context.headers['cookie']}\"}", httpMethod: POST)
}

type AlignmentConfig {
  createdAt: ISO8601DateTime!
  indexDirSuffix: String
  lineageVersion: String!
  lineageVersionOld: Int
  name: String
  s3Accession2taxidPath: String
  s3DeuterostomeDbPath: String
  s3LineagePath: String
  s3NrDbPath: String
  s3NrLocDbPath: String
  s3NtDbPath: String
  s3NtInfoDbPath: String
  s3NtLocDbPath: String
  s3TaxonBlacklistPath: String
  updatedAt: ISO8601DateTime!
}

input Annotation {
  name: String!
}

type AppConfig {
  key: String!
  value: String!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""Autogenerated return type of CreateUser."""
type CreateUserPayload {
  archetypes: String
  email: String
  institution: String
  name: String
  role: Int
  segments: String
  sendActivation: Boolean
}

type DbSample {
  alignmentConfigName: String
  basespaceAccessToken: String
  clientUpdatedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  dagVars: String
  doNotProcess: Boolean!
  hostGenomeId: Int
  hostGenomeName: String
  id: Int!
  initialWorkflow: String!
  inputFiles: [InputFile!]!
  maxInputFragments: Int
  name: String
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  privateUntil: ISO8601DateTime
  projectId: Int
  s3Bowtie2IndexPath: String
  s3PreloadResultPath: String
  s3StarIndexPath: String
  sampleNotes: String
  status: String
  subsample: Int
  updatedAt: ISO8601DateTime!
  uploadError: String
  uploadedFromBasespace: Int!
  useTaxonWhitelist: Boolean!
  userId: Int!
  webCommit: String
}

type DerivedSampleOutput {
  hostGenomeName: String!
  pipelineRun: PipelineRun
  projectName: String!
  summaryStats: SampleSummaryStats
}

type HostGenome {
  createdAt: ISO8601DateTime!
  defaultBackgroundId: Int
  id: Int!
  name: String!
  s3Bowtie2IndexPath: String!
  s3Minimap2IndexPath: String
  s3StarIndexPath: String!
  samplesCount: Int!
  skipDeuteroFilter: Int!
  taxaCategory: String!
  updatedAt: ISO8601DateTime!
  user: User
  userId: Int
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type InputFile {
  createdAt: ISO8601DateTime!
  id: Int!
  name: String
  parts: String
  presignedUrl: String
  sampleId: Int!
  source: String
  sourceType: String
  updatedAt: ISO8601DateTime
  uploadClient: String
}

type MngsRunInfo {
  createdAt: ISO8601DateTime
  finalized: Int
  reportReady: Boolean
  resultStatusDescription: String
  totalRuntime: Int
  withAssembly: Int
}

type Pathogen {
  category: String
  name: String
  taxId: Int
}

type PathogenList {
  citations: [String!]
  createdAt: ISO8601DateTime
  id: ID
  name: String
  pathogens: [Pathogen!]
  updatedAt: ISO8601DateTime
  version: String
}

type PipelineRun {
  adjustedRemainingReads: Int
  alertSent: Boolean!
  alignmentConfig: AlignmentConfig
  alignmentConfigId: Int
  alignmentConfigName: String
  assembled: Int
  compressionRatio: Float
  createdAt: ISO8601DateTime
  dagVars: String
  deprecated: Boolean
  errorMessage: String
  executedAt: ISO8601DateTime
  finalized: Int
  fractionSubsampled: Float
  id: Int!
  jobStatus: String
  knownUserError: String
  maxInputFragments: Int
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  pipelineVersion: String
  qcPercent: Float
  resultsFinalized: Int
  s3OutputPrefix: String
  sampleId: Int
  sfnExecutionArn: String
  subsample: Int
  timeToFinalized: Int
  timeToResultsFinalized: Int
  totalErccReads: Int
  totalReads: Int
  truncated: Int
  unmappedReads: Int
  updatedAt: ISO8601DateTime!
  useTaxonWhitelist: Boolean!
  wdlVersion: String
}

type Project {
  backgroundFlag: Int
  createdAt: ISO8601DateTime!
  creator: User
  daysToKeepSamplePrivate: Int!
  description: String
  id: Int!
  maxInputFragmentsDefault: Int
  name: String!
  publicAccess: Int!
  samples: [Sample!]
  subsampleDefault: Int
  totalSampleCount: Int!
  updatedAt: ISO8601DateTime!
}

type Sample {
  alignmentConfigName: String
  basespaceAccessToken: String
  createdAt: ISO8601DateTime
  dagVars: String
  defaultBackgroundId: Int
  defaultPipelineRunId: Int
  details: SampleDetails!
  doNotProcess: Boolean!
  editable: Boolean
  hostGenome: HostGenome
  hostGenomeId: Int
  id: Int!
  initialWorkflow: String!
  maxInputFragments: Int
  name: String!
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  pipelineRuns: [PipelineRun!]
  privateUntil: ISO8601DateTime
  project: Project
  projectId: Int
  public: Int!
  s3Bowtie2IndexPath: String
  s3PreloadResultPath: String
  s3StarIndexPath: String
  sampleDeletable: Boolean
  sampleNotes: String
  status: String
  subsample: Int
  updatedAt: ISO8601DateTime
  uploadError: String
  uploadedFromBasespace: Int
  useTaxonWhitelist: Boolean!
  user: User
  userId: Int
  webCommit: String
  workflowRuns: [WorkflowRun!]
}

type SampleDetails {
  dbSample: DbSample
  derivedSampleOutput: DerivedSampleOutput
  metadata: SampleMetadata
  mngsRunInfo: MngsRunInfo
  uploader: SampleUploader!
  workflowRunsCountByWorkflow: String
}

type SampleList {
  sampleIds: [Int!]
  samples: [Sample!]!
}

type SampleMetadata {
  collectionDate: String
  collectionLocationV2: String
  nucleotideType: String
  sampleType: String
  waterControl: String
}

type SampleReadsStats {
  initialReads: Int
  name: String
  pipelineVersion: String
  sampleId: Int!
  steps: [SampleSteps!]
  wdlVersion: String
}

type SampleReadsStatsList {
  sampleReadsStats: [SampleReadsStats!]!
}

type SampleSteps {
  name: String
  readsAfter: Int
}

type SampleSummaryStats {
  adjustedRemainingReads: Int
  compressionRatio: Float
  insertSizeMean: Float
  insertSizeStandardDeviation: Float
  lastProcessedAt: ISO8601DateTime
  percentRemaining: Float
  qcPercent: Float
  readsAfterCzidDedup: Int
  readsAfterPriceseq: Int
  readsAfterStar: Int
  readsAfterTrimmomatic: Int
  unmappedReads: Int
}

type SampleUploader {
  id: Int!
  name: String
}

type User {
  archetypes: String!
  createdByUserId: BigInt!
  email: String!
  id: ID!
  institution: String!
  name: String!
  role: Int!
  segments: String!
}

type WorkflowRun {
  cachedResults: String
  createdAt: ISO8601DateTime!
  deprecated: Boolean!
  errorMessage: String
  executedAt: ISO8601DateTime
  inputsJson: String
  rerunFrom: Int
  s3OutputPrefix: String
  sample: Sample
  sampleId: Int
  sfnExecutionArn: String
  status: String!
  timeToFinalized: Int
  updatedAt: ISO8601DateTime!
  wdlVersion: String
  workflow: String!
}

"Generated mesh schema from JSON object"
type GeneratedMeshSchema {
  bulk_download: query_BulkDownload_bulk_download
  download_type: query_BulkDownload_download_type
}

type query_BulkDownload_bulk_download {
  id: JSON
  params_json: JSON
  download_type: JSON
  status: JSON
  error_message: JSON
  user_id: JSON
  created_at: JSON
  updated_at: JSON
  progress: JSON
  ecs_task_arn: JSON
  output_file_size: JSON
  description: JSON
  deleted_at: JSON
  analysis_type: JSON
  analysis_count: JSON
  num_samples: JSON
  download_name: JSON
  file_size: JSON
  user_name: JSON
  execution_type: JSON
  log_url: JSON
  params: JSON
  pipeline_runs: JSON
  workflow_runs: JSON
  presigned_output_url: JSON
}

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type query_BulkDownload_download_type {
  type: JSON
  display_name: JSON
  description: JSON
  category: JSON
  execution_type: JSON
  fields: JSON
  file_type_display: JSON
  workflows: JSON
}

type PipelineData {
  stages: [query_PipelineData_stages_items]
  edges: [query_PipelineData_edges_items]
  status: JSON
}

type query_PipelineData_stages_items {
  name: JSON
  steps: [query_PipelineData_stages_items_steps_items]
  jobStatus: JSON
}

type query_PipelineData_stages_items_steps_items {
  name: JSON
  description: JSON
  inputVariables: [query_PipelineData_stages_items_steps_items_inputVariables_items]
  outputFiles: [query_PipelineData_stages_items_steps_items_outputFiles_items]
  inputEdges: [JSON]
  outputEdges: [JSON]
  status: JSON
  startTime: JSON
  endTime: JSON
  resources: [JSON]
}

type query_PipelineData_stages_items_steps_items_inputVariables_items {
  name: JSON
  type: JSON
}

type query_PipelineData_stages_items_steps_items_outputFiles_items {
  displayName: JSON
  url: JSON
}

type query_PipelineData_edges_items {
  to: query_PipelineData_edges_items_to
  from: query_PipelineData_edges_items_from
  files: [query_PipelineData_edges_items_files_items]
  isIntraStage: JSON
}

type query_PipelineData_edges_items_to {
  stageIndex: JSON
  stepIndex: JSON
}

type query_PipelineData_edges_items_from {
  stageIndex: JSON
  stepIndex: JSON
}

type query_PipelineData_edges_items_files_items {
  displayName: JSON
  url: JSON
}

type query_Samples_items {
  id: JSON
  name: JSON
  entity: query_Samples_items_entity
  reference_genome: query_Samples_items_reference_genome
}

type query_Samples_items_entity {
  created_at: JSON
  project_id: JSON
}

type query_Samples_items_reference_genome {
  id: JSON
}

type TaxonDist {
  merged_NT_NR: query_TaxonDist_merged_NT_NR
  NR: query_TaxonDist_NR
  NT: query_TaxonDist_NT
}

type query_TaxonDist_merged_NT_NR {
  tax_level: JSON
  mean: JSON
  stdev: JSON
  rpm_list: [JSON]
}

type query_TaxonDist_NR {
  tax_level: JSON
  mean: JSON
  stdev: JSON
  rpm_list: [JSON]
}

type query_TaxonDist_NT {
  tax_level: JSON
  mean: JSON
  stdev: JSON
  rpm_list: [JSON]
}

input mutationInput_UpdateSampleNotes_input_Input @example(value: "{\"value\":\"test\",\"field\":\"notes\",\"authenticityToken\":\"test\"}") {
  value: String
  field: String
  authenticityToken: String
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}