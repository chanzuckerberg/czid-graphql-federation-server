sources:
  - name: CZIDGQL
    handler:
      graphql:
        endpoint: ${API_URL}/graphql
        source: ./sources/czid-schema.graphql
        operationHeaders:
          Cookie: "{context.headers['cookie']}"
  - name: NextGenEntities
    handler:
      graphql:
        endpoint: ${NEXTGEN_ENTITIES_URL}/graphql
        source: ./sources/nextgen-entities-schema.graphql
        operationHeaders:
          Cookie: "{context.headers['authorization']}"
          Authorization: "{context.headers.authorization}"
  - name: NextGenWorkflows
    handler:
      graphql:
        endpoint: ${NEXTGEN_WORKFLOWS_URL}/graphql
        source: ./sources/nextgen-workflows-schema.graphql
        operationHeaders:
          Cookie: "{context.headers['authorization']}"
          Authorization: "{context.headers.authorization}"
  - name: CZIDREST
    handler:
      jsonSchema:
        endpoint: ${API_URL}/
        operations:
          - type: Query
            field: AmrDeprecatedResults
            path: /samples/{args.sampleId}/amr.json
            method: GET
            responseSchema: ./json-schemas/amrDeprecatedResults.json
            responseTypeName: AmrDeprecatedResults
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Query
            field: AmrWorkflowResults
            path: /workflow_runs/{args.workflowRunId}/results
            method: GET
            responseSchema: ./json-schemas/amrWorkflowResults.json
            responseTypeName: AmrWorkflowResults
          - type: Query
            field: Background
            path: /pub/{args.snapshotLinkId}/backgrounds.json
            method: GET
            responseSchema: ./json-schemas/snapshotBackground.json
            responseTypeName: Background
          - type: Query
            field: fedBulkDownloads
            path: /bulk_downloads?searchBy=${searchBy}&n=${limit}
            method: GET
            requestSample: { searchBy: "string to search", limit: 10 }
            responseSchema: ./json-schemas/bulkDownloads.json
            responseTypeName: fedBulkDownloads
          - type: Query
            field: BulkDownloadCGOverview
            path: /bulk_downloads
            method: POST
            requestSchema: ./json-schemas/createBulkDownloadCSV.json
            responseSchema: ./json-schemas/cgOverview.json
            responseTypeName: ConsensusGenomeOverviewRows
          - type: Query
            field: fedConsensusGenomes
            method: GET
            path: /workflow_runs.json
            requestSchema: ./json-schemas/consensusGenomesRequest.json
            responseSchema: ./json-schemas/consensusGenomesResponse.json
            responseTypeName: fedConsensusGenomes
          - type: Query
            field: ConsensusGenomeWorkflowResults
            path: /workflow_runs/{args.workflowRunId}/results
            method: GET
            responseSchema: ./json-schemas/consensusGenomeWorkflowResults.json
            responseTypeName: ConsensusGenomeWorkflowResults
          - type: Query
            field: CoverageVizSummary
            path: /pub/{args.snapshotLinkId}/samples/{args.sampleId}/coverage_viz_summary
            method: GET
            responseSchema: ./json-schemas/coverageVizSummary.json
            responseTypeName: CoverageVizSummary
          - type: Query
            field: MetadataFields
            path: /pub/{args.snapshotLinkId}/samples/metadata_fields
            method: POST
            requestSchema: ./json-schemas/sampleArray.json
            responseSchema: ./json-schemas/metadataFields.json
            responseTypeName: MetadataFields
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Query
            field: SampleMetadata
            path: /pub/{args.snapshotLinkId}/samples/{args.sampleId}/metadata
            method: GET
            requestSample: { pipelineVersion: "8.0" }
            responseSchema: ./json-schemas/sampleMetadata.json
            responseTypeName: SampleMetadata
          - type: Query
            field: MngsWorkflowResults
            path: /pub/{args.snapshotLinkId}/samples/{args.sampleId}.json
            method: GET
            responseSchema: ./json-schemas/mngsWorkflowResults.json
            responseTypeName: MngsWorkflowResults
          - type: Query
            field: MngsWorkflowResults
            path: /pub/{args.snapshotLinkId}/samples/{args.sampleId}/report_v2?&id={args.sampleId}&pipeline_version={args.workflowVersionId}&background={args._backgroundId}&merge_nt_nr=false
            method: GET
            responseSchema: ./json-schemas/mngsWorkflowResults.json
            responseTypeName: MngsWorkflowResults
          - type: Query
            field: Pathogens
            path: /pub/{args.snapshotLinkId}/samples/{args.sampleId}/report_v2?&id={args.sampleId}&pipeline_version={args.workflowVersionId}&merge_nt_nr=false
            method: GET
            responseSchema: ./json-schemas/pathogens.json
            responseTypeName: Pathogens
          - type: Query
            field: PersistedBackground
            path: /persisted_backgrounds/{args.projectId}
            method: GET
            responseSchema: ./json-schemas/persistedBackground.json
            responseTypeName: PersistedBackground
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Query
            field: PipelineData
            path: /samples/{args.sampleId}/pipeline_viz/{args.workflowVersionId}.json
            method: GET
            responseSchema: ./json-schemas/pipelineData.json
            responseTypeName: PipelineData
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Query
            field: fedSamples
            method: GET
            path: /workflow_runs.json
            requestSchema: ./json-schemas/samplesRequest.json
            responseSchema: ./json-schemas/samplesResponse.json
            responseTypeName: fedSamples
          - type: Query
            field: fedSequencingReads
            method: GET
            path: /workflow_runs.json
            requestSchema: ./json-schemas/sequencingReadsRequest.json
            responseSchema: ./json-schemas/sequencingReadsResponse.json
            responseTypeName: fedSequencingReads
          - type: Query
            field: Taxons
            path: /pub/{args.snapshotLinkId}/samples/{args.sampleId}/report_v2?&id={args.sampleId}&pipeline_version={args.workflowVersionId}&merge_nt_nr=false
            method: GET
            responseSchema: ./json-schemas/taxons.json
            responseTypeName: Taxons
          - type: Query
            field: TaxonDist
            path: /backgrounds/{args.backgroundId}/show_taxon_dist.json?taxid={args.taxonId}
            method: GET
            responseSchema: ./json-schemas/taxonDist.json
            responseTypeName: TaxonDist
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Query
            field: UserBlastAnnotations
            path: /samples/{args.sampleId}/report_v2?&id={args.sampleId}&pipeline_version={args.workflowVersionId}&merge_nt_nr=false
            method: GET
            responseSchema: ./json-schemas/userBlastAnnotations.json
            responseTypeName: UserBlastAnnotations
          - type: Query
            field: ValidateUserCanDeleteObjects
            path: /samples/validate_user_can_delete_objects.json
            method: POST
            requestSample:
              { "selectedIds": [28114, 28151], "workflow": "short-read-mngs", "authenticityToken": "token" }
            responseSchema: ./json-schemas/validateUsersCanDeleteObjects.json
            responseTypeName: ValidateUserCanDeleteObjects
          - type: Query
            field: fedWorkflowRuns
            path: /workflow_runs.json
            method: POST
            requestSchema: ./json-schemas/workflowRunsRequest.json
            responseSchema: ./json-schemas/workflowRunsResponse.json
            responseTypeName: fedWorkflowRuns
          - type: Query
            field: fedWorkflowRunsAggregate
            path: /projects.json
            method: GET
            requestSchema: ./json-schemas/workflowRunsAggregateRequest.json
            responseSchema: ./json-schemas/workflowRunsAggregateResponse.json
            responseTypeName: fedWorkflowRunsAggregate
          - type: Query
            field: ZipLink
            path: /workflow_runs/{args.workflowRunId}/zip_link.json
            method: GET
            responseSchema: ./json-schemas/zipLink.json
            responseTypeName: ZipLink
          - type: Mutation
            field: CreateBulkDownload
            path: /bulk_download
            method: POST
            requestSchema: ./json-schemas/createBulkDownload.json
            responseTypeName: BulkDownload
          - type: Mutation
            field: DeleteSamples
            path: /samples/bulk_delete
            method: POST
            requestSample: { "ids": [1], "workflow": "short-read-mngs", "authenticityToken": "token" }
            responseSchema: ./json-schemas/deleteSamples.json
            responseTypeName: DeleteSamples
          - type: Mutation
            field: UpdateSampleNotes
            path: /samples/{args.sampleId}/save_metadata
            method: POST
            requestSchema: ./json-schemas/updateMetadataSimple.json
            responseSchema: ./json-schemas/updateSampleNotes.json
            responseTypeName: UpdateSampleNotes
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Mutation
            field: UpdateSampleName
            path: /samples/{args.sampleId}/save_metadata
            method: POST
            requestSchema: ./json-schemas/updateMetadataSimple.json
            responseSchema: ./json-schemas/updateSampleName.json
            responseTypeName: UpdateSampleName
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Mutation
            field: KickoffWGSWorkflow
            path: /samples/{args.sampleId}/kickoff_workflow
            method: POST
            requestSample:
              {
                "inputs_json":
                  {
                    "accession_id": "KX882832.1",
                    "accession_name": "Hubei mosquito virus 2 strain mosZJ35453 segment 1 hypothetical protein 1 and hypothetical protein 2 genes, complete cds",
                    "taxon_id": "1922926",
                    "taxon_name": "Menispermaceae",
                    "alignment_config_name": "config_name",
                    "technology": "Illumina",
                  },
                "workflow": "amr",
                "authenticityToken": "token",
              }
            responseSchema: ./json-schemas/kickoffWorkflow.json
            responseTypeName: KickoffWGSWorkflow
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Mutation
            field: KickoffAMRWorkflow
            path: /samples/{args.sampleId}/kickoff_workflow
            method: POST
            requestSample:
              { "inputs_json": { "start_from_mngs": true }, "workflow": "amr", "authenticityToken": "token" }
            responseSchema: ./json-schemas/kickoffWorkflow.json
            responseTypeName: KickoffAMRWorkflow
            headers:
              Cookie: "{context.headers['cookie']}"
          - type: Mutation
            field: UpdateMetadata
            path: /samples/{args.sampleId}/save_metadata_v2
            method: POST
            requestSchema: ./json-schemas/updateMetadata.json
            responseSchema: ./json-schemas/updateMetadataResponse.json
            responseTypeName: UpdateMetadataReponse
            headers:
              Cookie: "{context.headers['cookie']}"
      transforms:
        - namingConvention:
            typeNames: camelCase
            fieldNames: camelCase
additionalTypeDefs: |
  type GraphQLFederationVersion {
    version: String
    gitCommit: String
  }
  extend type Query {
    GraphQLFederationVersion: GraphQLFederationVersion
  }
additionalResolvers:
  - ./resolvers.ts
plugins:
  - csrfPrevention:
      requestHeaders: ["x-graphql-yoga-csrf"]
serve:
  port: 4444
  endpoint: "/graphqlfed"
  playground: true
  cors:
    origin: "${ALLOWED_CORS_ORIGINS}"
